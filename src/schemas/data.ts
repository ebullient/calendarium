// Generated by ts-to-zod
import { z } from "zod";
import { calendarSchema } from "./calendar/calendar";

export type CalDate = z.infer<typeof calDateSchema>;
export const calDateSchema = z.object({
    year: z.number(),
    month: z.number(),
    day: z.number(),
});

export type CalendariumCodeBlockParameters = z.infer<
    typeof calendariumCodeBlockParametersSchema
>;
export const calendariumCodeBlockParametersSchema = z.object({
    calendar: z.string().optional(),
});

export type CalendariumData = z.infer<typeof calendariumDataSchema>;
export const SyncBehavior = z.enum(["Ask", "Always", "Never"]);
export type SyncBehavior = z.infer<typeof SyncBehavior>;
export const calendariumDataSchema = z.object({
    addToDefaultIfMissing: z.boolean(),
    calendars: z.array(calendarSchema),
    configDirectory: z.string().nullable(),
    dailyNotes: z.boolean(),
    dateFormat: z.string(),
    defaultCalendar: z.nullable(z.string()),
    eventFrontmatter: z.boolean(),
    eventPreview: z.boolean(),
    exit: z.object({
        saving: z.boolean(),
        event: z.boolean(),
        calendar: z.boolean(),
    }),
    parseDates: z.boolean(),
    settingsToggleState: z.object({
        calendars: z.boolean(),
        events: z.boolean(),
        advanced: z.boolean(),
    }),
    showIntercalary: z.boolean(),
    version: z.object({
        major: z.number().nullable(),
        minor: z.number().nullable(),
        patch: z.union([z.number(), z.string()]).nullable(),
    }),
    debug: z.boolean(),
    askedToMoveFC: z.boolean(),
    askedAboutSync: z.boolean(),
    syncBehavior: SyncBehavior,
});

export type MarkdownCalendariumData = z.infer<
    typeof markdownCalendariumDataSchema
>;
export const markdownCalendariumDataSchema = calendariumDataSchema.omit({});
